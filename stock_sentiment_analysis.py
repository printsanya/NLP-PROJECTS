# -*- coding: utf-8 -*-
"""STOCK SENTIMENT ANALYSIS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KGI9rnAyapB3M0-1fCEwrJJ45VmOcXOB
"""

import pandas as pd
headlines=pd.read_csv("/Data.csv",encoding="ISO-8859-1")
headlines.head()

from google.colab import drive
drive.mount('/content/drive')

X=headlines.iloc[:,2:27]
y=headlines.iloc[:,1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

X.replace("[^a-zA-Z]"," ",regex=True, inplace=True)
# list1=[i for i in ]
new_index=[str(i) for i in range(25)]
X.columns=new_index
X.head()

for index in new_index:
  X[index]=X[index].str.lower()
X.head(1)

df=[]
for row in range(0,len(X_train.index)):
  df.append(' '.join(str(x) for x in X.iloc[row,0:25]))



from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier

count_vector=CountVectorizer(ngram_range=(2,2))
traindataset=count_vector.fit_transform(df)

randomclassifier=RandomForestClassifier(n_estimators=200,criterion='entropy')
randomclassifier.fit(traindataset,y_train)

print(y_train)

print(traindataset)

testtransform=[]
for row in range(0,len(X_train.index)):
  testtransform.append(' '.join(str(x) for x in X.iloc[row,0:25]))
testtransform=count_vector.fit_transform(testtransform)
prediction=randomclassifier.predict(testtransform)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
matrix=confusion_matrix(y_train,prediction)
print(matrix)
score=accuracy_score(y_train,prediction)
print(score)