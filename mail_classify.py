# -*- coding: utf-8 -*-
"""MAIL_CLASSIFY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pkI05c3AH_mjveyBQ8sfEz6gRnqGPnze
"""

import pandas as pd



messages = pd.read_csv('/content/spam.csv', sep='\t', names=['label', 'message'], encoding='latin1')

import re
import nltk

nltk.download("stopwords")

from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

ps = PorterStemmer()
messages['message'] = messages['message'].astype(str)

corpus = []
for i in range(0, len(messages)):
    text = messages['message'][i]


    review = re.sub('[^a-zA-Z]', ' ', text)
    review = review.lower()
    review = review.split()


    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)
    from sklearn.feature_extraction.text import CountVectorizer
    cv = CountVectorizer(max_features=5000)
    X = cv.fit_transform(corpus).toarray()
# CountVectorizer() converts text into a matrix of token counts.

# fit_transform(corpus) learns the vocabulary and transforms the text data into vectors(bow).

# .toarray() converts the sparse matrix to a regular NumPy array (optional, but useful for some models)

    y = pd.get_dummies(messages['label'])

    y = y.iloc[:, 1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

from sklearn.naive_bayes import MultinomialNB
spam_detect_model = MultinomialNB().fit(X_train, y_train)

y_pred = spam_detect_model.predict(X_test)

from sklearn.metrics import confusion_matrix
confusion_m = confusion_matrix(y_test, y_pred)
print(confusion_m)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print(accuracy)

from google.colab import drive
drive.mount('/content/drive')